meri trf mail nahi aa rahi kiyaa maslaa hay yh neechay rahaaa saraa code isko deikhein kahann maslaa aaraa hay ?

yh meri nodemailer ki file hay 

const nodemailer = require("nodemailer");

const sendEmail = async ({ to, subject, html }) => {
  try {
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      service: process.env.SMTP_SERVICE,
      port: 587,
      secure: false, // should be false for port 587
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    await transporter.sendMail({
      from: process.env.SMTP_USER,
      to,
      subject,
      html,
    });

    console.log("Email sent successfully");
  } catch (error) {
    console.error("Email not sent:", error.message);
    throw new Error("Email sending failed");
  }
};

module.exports = sendEmail;



yh suthcontroller ki file hay 

const jwt = require("jsonwebtoken");
const sendMail = require("../utils/nodemailer");
const User = require("../models/User");
const bcrypt = require("bcryptjs");
const SECRET_KEY = process.env.SECRET_KEY;

const signUp = async (req, res) => {
  const { username, email, password, confirmPassword } = req.body;

  if (password !== confirmPassword) {
    return res.status(400).json({ message: "Passwords do not match" });
  }

  const existingUser = await User.findOne({ email });
  if (existingUser) {
    return res.status(400).json({ message: "User already exists" });
  }

  const token = jwt.sign({ username, email, password }, SECRET_KEY, {
    expiresIn: "1h",
  });
  const verificationLink = `http://localhost:4000/api/verify-email?token=${token}`;

  const html = `
    <h1>Hey ${username},</h1>
    <p>Click the link below to verify your email address:</p>
    <a href="${verificationLink}">Verify Email</a>
  `;

  try {
    await sendMail({
      to: email,
      subject: "Verify Your Email",
      html,
    });
    res
      .status(201)
      .json({ message: "Check your email to verify your account." });
  } catch (error) {
    console.error("Error sending email:", error);
    res.status(500).json({ message: "Failed to send email" });
  }
};

const verifyEmail = async (req, res) => {
  const { token } = req.query;

  if (!token) return res.status(400).json({ message: "Token missing" });

  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    const { username, email, password } = decoded;

    const user = await User.findOne({ email });
    if (user) return res.status(400).send("User already verified.");

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      username,
      email,
      password: hashedPassword,
      isVerified: true,
    });
    await newUser.save();

    res.send(
      `<h2>Email Verified. <a href="http://localhost:5173/login">Login</a></h2>`
    );
  } catch (err) {
    res.status(400).send("Invalid or expired link");
  }
};

module.exports = { signUp, verifyEmail };



yh pehlay mn ne just form ko datavase mn send krny k liye bnaayi thee k yh jaa raa hay yaa nahi

const User = require("../models/User");


const postApi = async (req , res) => {
  try {
    const {username, email, password, confirmPassword} = req.body;

    const user = await User({
      username,
      email,
      password,
      confirmPassword
    }).save();
    console.log("User data:", user);

    res.status(201).json({
      success: true,
      message: "User created successfully",
      data: user,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "User creation failed",
      error: error.message,
    });
    console.log("New Error creating user:", error);
  }
}

module.exports = {
  postApi
};



yh raha meraaaa routes kaa file structure

const express = require('express');
const { signUp , verifyEmail } = require('../controller/authController');
const router = express.Router();



router.post("/signup" , signUp)
router.get("/verify-email", verifyEmail);

module.exports = router;


yh meri user database ki file or schema

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    username:{
        type:String,
        required:true,
        unique:true,
        index:true,
    },
    email:{
        type:String,
        required:true,
        unique:true,
    },
    password:{
        type:String,
        required:true,
        unique:true,
    },
    isVerified:{
        type:Boolean,
        default:false
    }
});

module.exports = mongoose.model('User', userSchema);



yh rahi meri server,js ki main file 

const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const cors = require('cors');
const dotenv = require('dotenv');
const connectDB = require('./config/db');
dotenv.config();
const port = process.env.PORT || 3000;
const uri = process.env.MONGODB_URI;
const routes = require('./routes/routes');

connectDB(uri);

app.use(cors());
app.use(express.json());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.use('/api', routes);

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});





yh masla solved huaa hay console mn Node.js v20.17.0
[nodemon] app crashed - waiting for file changes before starting...
[nodemon] restarting due to changes...
[nodemon] starting `node server.js`
[nodemon] restarting due to changes...
[nodemon] starting `node server.js`
[dotenv@17.1.0] injecting env (6) from .env (tip: ⚙️  write to custom object with { processEnv: myObject })
Server running on http://localhost:4000
MongoDB connected                                                                                                                                        lekin fir bhi jb bhi mn form fill krtaa hu to signup failded kaa toast show hotaa hy or data bhi compass mn show nahi ho rahaa

yh hay meri email verifcation kaa html esay mn thorhaa professional bnana chahtaa hu 
const html = `
    <h1>Hello ${username},</h1>
    <p>Click the link below to verify your email:</p>
    <button style="background-color: #dcefff; color: #003366; padding: 12px 30px; border: none; border-radius: 6px; font-size: 16px; cursor: pointer; font-weight: bold;"><a href="${verificationLink}">Verify Email</button>

  `;
esi ko nay convert krnaa hay new tempalate with inline css mn 
jo mn ne apko refrence image send kee hay same essi hi html likhni hy bs chnge apko jo laani hay meri wali htmlmn vo hogi k total saray ka background app ne #333438 yh rkhnaa hay or meri website kaa naam hay Type Sphere to jahann selffy naam kaa logo hay refrence image mn usko exchange kr k app ne Type Sphere kr denaa hay jiskaa color app ne #e2b714 yh kr denaa hay baaqi text same or us text ka color white ho jiski opacity 0.8 ho . then aanaa hay app ne btton pr jesi styling or size refrence image mn diyaa gyaa hay button kaa same wesaaa bna deinn lekin jo button kaa background color hogaa usay app #e2b714 yh kr dein or andr kaa text ka color white ho

yhnn result ko calculate kr raa hu

import React, { useState, useEffect, useRef } from "react";
import "./TextDisplay.css";

const TextDisplay = ({
  retryPara,
  para,
  slectedTimmer,
  resultToggle,
  resultset,
}) => {
  const [timeLeft, setTimeLeft] = useState(slectedTimmer);
  const [userTypedInput, setUserTypedInput] = useState(""); // total keys typed (correct + wrong)
  const [visibleInput, setVisibleInput] = useState("");      // only correct keys
  const [isTypingStart, setIsTypingStart] = useState(false);
  const inputRef = useRef(null);

  // Reset all state when para or timer changes
  useEffect(() => {
    setUserTypedInput("");
    setVisibleInput("");
    setTimeLeft(slectedTimmer);
    setIsTypingStart(false);
  }, [para, slectedTimmer]);

  // Countdown timer
  useEffect(() => {
    if (!isTypingStart || timeLeft <= 0) return;

    const timer = setTimeout(() => {
      setTimeLeft((prev) => {
        const updated = prev - 1;
        if (updated === 0) {
          calculateResult();
        }
        return updated;
      });
    }, 1000);

    return () => clearTimeout(timer);
  }, [timeLeft, isTypingStart]);

  const calculateResult = () => {
    const correctChars = visibleInput
    .split("")
    .filter((char, i) => char === para[i]).length;

  const totalTyped = userTypedInput.length;

  const accuracy = Math.round((correctChars / (totalTyped || 1)) * 100);
  const wpm = Math.round((correctChars / 5) / (slectedTimmer / 60));

  const wrongTyped = totalTyped - correctChars

    resultset({ wpm, accuracy, totalTyped, wrongTyped});
    resultToggle(true);
  };

  const handleKeyDown = (e) => {
    const key = e.key;

    if (!isTypingStart) setIsTypingStart(true);

    if (key === "Backspace") {
      setUserTypedInput((prev) => prev.slice(0, -1));
      setVisibleInput((prev) => prev.slice(0, -1));
      return;
    }

    if (key.length !== 1) return;

    const currentIndex = visibleInput.length;
    if (currentIndex >= para.length) return;

    const currentChar = para[currentIndex];

    setUserTypedInput((prev) => prev + key); // always record typed key

    if (key === currentChar) {
      const newVisible = visibleInput + key;
      setVisibleInput(newVisible);

      if (newVisible.length === para.length) {
        calculateResult(); // completed early
      }
    }
    // ❌ if wrong key, no UI change, but counted in userTypedInput
  };

  // Keydown listener
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [visibleInput, isTypingStart]);

  // Highlight paragraph characters
  const renderParagraph = () => {
    return para.split("").map((char, index) => {
      let className = "default";

      if (index < visibleInput.length) {
        className = visibleInput[index] === char ? "correct" : "incorrect";
      } else if (index === visibleInput.length) {
        className = "cursor";
      }

      return (
        <span key={index} className={className}>
          {char}
        </span>
      );
    });
  };

  return (
    <div className="display-main">
      <div className="text-timer">
        <p>{timeLeft}</p>
      </div>

      <div className="text-area" onClick={() => inputRef.current?.focus()}>
        <p className="paragraph">{renderParagraph()}</p>
        <input
          ref={inputRef}
          className="hidden-input"
          onPaste={(e) => e.preventDefault()}
          onCopy={(e) => e.preventDefault()}
          onCut={(e) => e.preventDefault()}
          onContextMenu={(e) => e.preventDefault()}
        />
      </div>

      <div className="text-repeat">
        <img
          src="/images/icons8-repeat-50.png"
          alt="refresh"
          onClick={retryPara}
        />
      </div>
    </div>
  );
};

export default TextDisplay;

or yahann store krwaa raaa hu 

import React from "react";
import './Result.css'

const Result = ({wpm , accuracy, totalTyped , wrongTyped}) => {
  let noteImprove = `You have typed a total of ${totalTyped} characters, among which ${wrongTyped} were incorrect, reflecting slight inaccuracies in your typing performance.`;
  let grade = `default`;

  if (wpm <= 10 && accuracy <= 50) {
    noteImprove = `You typed ${totalTyped} characters, with ${wrongTyped} incorrect entries. Your current typing speed is ${wpm} WPM with ${accuracy}% accuracy. This indicates major room for improvement. Begin with slow, focused drills and home-row key mastery. Your fundamentals need attention.`;
    grade = `Grade: F - Beginner Level`;
  }

  else if (wpm <= 20 && accuracy <= 60) {
    noteImprove = `You typed ${totalTyped} characters, and made ${wrongTyped} mistakes. Your speed of ${wpm} WPM and ${accuracy}% accuracy show basic familiarity with the keyboard, but frequent errors are holding you back. Prioritize accuracy over speed. Practice 15 minutes daily on structured lessons.`;
    grade = `Grade: E - Below Average`;
  }

  else if (wpm <= 30 && accuracy <= 70) {
    noteImprove = `Out of ${totalTyped} characters typed, ${wrongTyped} were incorrect. With ${wpm} WPM and ${accuracy}% accuracy, your typing shows developing control, but error rate is still significant. Use typing tests to track progress. Consistency is key.`;
    grade = `Grade: D - Developing`;
  }

  else if (wpm <= 40 && accuracy >= 75) {
    noteImprove = `You typed ${totalTyped} characters and made ${wrongTyped} mistakes. Your typing speed of ${wpm} WPM with ${accuracy}% accuracy is decent. You're building rhythm but need to reduce errors. Focus on high-accuracy typing in coming sessions.`;
    grade = `Grade: C - Average`;
  }

  else if (wpm <= 50 && accuracy >= 80) {
    noteImprove = `Great progress! You typed ${totalTyped} characters with ${wrongTyped} incorrect. Your ${wpm} WPM speed and ${accuracy}% accuracy reflect growing proficiency. You're ready for real-world typing tasks. Work on consistency with longer sessions.`;
    grade = `Grade: B - Competent`;
  }

  else if (wpm <= 60 && accuracy >= 90) {
    noteImprove = `Excellent job! You typed ${totalTyped} characters with only ${wrongTyped} wrong inputs. ${wpm} WPM at ${accuracy}% accuracy shows strong efficiency. Keep refining your pace and try technical passages for further mastery.`;
    grade = `Grade: A - Proficient`;
  }

  else if (wpm > 60 && accuracy >= 95) {
    noteImprove = `Outstanding performance! Out of ${totalTyped} characters typed, only ${wrongTyped} were incorrect. You're typing at ${wpm} WPM with ${accuracy}% accuracy — ideal for professional environments and exams. Maintain with advanced drills.`;
    grade = `Grade: A+ - Expert Typist`;
  }

  else {
    noteImprove = `Typing data is inconsistent. You typed ${totalTyped} characters with ${wrongTyped} errors. Please retry the test with a stable internet connection or check your device.`;
    grade = `Grade: N/A`;
  }

  return (
    <div style={{ textAlign: "center", marginTop: "100px"}} className="resut-main">
      <div className="result-container">
        <img src="/images/keyboardNewTranspenenetsst.png" alt="" />
        <div className="result-actual">
      <h2>Typing Test Complete</h2>
      <p id="wpm"><strong>WPM: </strong> {wpm}</p>
      <p id="accuracy"><strong>Accuracy:</strong> {accuracy}%</p>
      <p id="wrong"><strong id="strong">Performance Review: </strong>{noteImprove}<span>{grade}</span></p>
      <button onClick={() => window.location.reload()}>Restart</button>
      </div>
        <img src="/images/keyboardNewTranspenenetsst.png" alt="" />
      </div>
    </div>
  );
};

export default Result;


mujhy yh btyein esy ab new database k new schema mn kesay lay k jana hay ?





yh dataa hay meri files kaa lekin yh nahi smjh aa ryii k naaa hi compass db mn results naam kaa elehdaa folder show ho raa hay naa us mn koi dataa 


const saveResult = async (data) => {
    try {
      const res = await axios.post("http://localhost:4000/api/save-result", {
        wpm: data.wpm,
        accuracy: data.accuracy,
        totalTyped: data.totalTyped,
        wrongTyped: data.wrongTyped,
        timer: slectedTimmer
      });
      console.log("Result saved:", res.data);
      setSaveMessage("Result saved successfully.");
    } catch (error) {
      console.error("Error saving result:", error);
      setSaveMessage("Failed to save result.");
    }
  };


const express = require("express");
const { signUp, verifyEmail, login } = require("../controller/authController");
const { saveResult } = require("../controller/controller");

const router = express.Router();

router.post("/signup", signUp);
router.get("/verify-email", verifyEmail);
router.post("/login" , login)
router.post("/save-result" , saveResult)


module.exports = router;





const User = require("../models/User");


const saveResult = async (req, res) => {
  try {
    const { wpm, accuracy, totalTyped, wrongTyped, timer } = req.body;

    const result = await Result({
      wpm,
      accuracy,
      totalTyped,
      wrongTyped,
      timer
    }).save();

    res.status(201).json({
      success: true,
      message: "Result saved successfully",
      data: result
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Failed to save result",
      error: error.message
    });
  }
}

module.exports = {
  saveResult
};








yh rahi meri files kaa dataa jis trah app ne krnay ko bolaa same wesay hi kiyaaa lekin fir bhi same error aa raa hay jo pehlay aa raa thaa



const login = async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ message: "Email and password are required" });
  }

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    if (!user.isVerified) {
      return res.status(403).json({ message: "Email not verified" });
    }

    const token = jwt.sign({ id: user._id }, SECRET_KEY, { expiresIn: "1d" });

    res.json({
      token,
      user: { id: user._id, username: user.username, email: user.email },
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};






const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:4000/api/login', loginForm);
      const {user} = response.data;
      localStorage.setItem('userId', user.id);
      navigate('/dashboard');
    } catch (error) {
      console.error('Login failed:', error);
    }
  };




    const userId = localStorage.getItem("userId"); // Assuming user ID is stored in localStorage
    try {
      const res = await axios.post("http://localhost:4000/api/save-result", {
        userId,
        wpm: data.wpm,
        accuracy: data.accuracy,
        totalTyped: data.totalTyped,
        wrongTyped: data.wrongTyped,
        timer: slectedTimmer
      });
      console.log("Result saved:", res.data);
      setSaveMessage("Result saved successfully.");
    } catch (error) {
      console.error("Error saving result:", error);
      setSaveMessage("Failed to save result.");
    }
  };


  const User = require("../models/User");
 const Result = require("../models/Results");


const saveResult = async (req, res) => {
  try {
    const { wpm, accuracy, totalTyped, wrongTyped, timer, userId } = req.body;

    const result = await Result({
      userId,
      wpm,
      accuracy,
      totalTyped,
      wrongTyped,
      timer
    }).save();

    res.status(201).json({
      success: true,
      message: "Result saved successfully",
      data: result
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Failed to save result",
      error: error.message
    });
  }
}

module.exports = {
  saveResult
};

abb yh error aaraa hay 

User ID before saving result: null
TextDisplay.jsx:66 
POST http://localhost:4000/api/save-result 500 (Internal Server Error)
error
: 
"Results validation failed: userId: Path `userId` is required."
message
: 
"Failed to save result"












































User ID before saving result: null
TextDisplay.jsx:57 Cannot update a component (`App`) while rendering a different component (`TextDisplay`). To locate the bad setState() call inside `TextDisplay`, follow the stack trace as described in https://react.dev/link/setstate-in-render
calculateResult	@	TextDisplay.jsx:57
(anonymous)	@	TextDisplay.jsx:36
TextDisplay	@	TextDisplay.jsx:12
TextDisplay.jsx:66 
 POST http://localhost:4000/api/save-result 500 (Internal Server Error)
saveResult	@	TextDisplay.jsx:66
calculateResult	@	TextDisplay.jsx:59
(anonymous)	@	TextDisplay.jsx:36
TextDisplay	@	TextDisplay.jsx:12
Error saving result: AxiosError {message: 'Request failed with status code 500', name: 'AxiosError', code: 'ERR_BAD_RESPONSE', config: {…}, request: XMLHttpRequest, …}code: "ERR_BAD_RESPONSE"config: {transitional: {…}, adapter: Array(3), transformRequest: Array(1), transformResponse: Array(1), timeout: 0, …}message: "Request failed with status code 500"name: "AxiosError"request: XMLHttpRequest {onreadystatechange: null, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}response: config: {transitional: {…}, adapter: Array(3), transformRequest: Array(1), transformResponse: Array(1), timeout: 0, …}data: error: "Results validation failed: userId: Path `userId` is required."message: "Failed to save result"success: false[[Prototype]]: Objectheaders: AxiosHeaders {content-length: '123', content-type: 'application/json; charset=utf-8'}request: XMLHttpRequest {onreadystatechange: null, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}status: 500statusText: "Internal Server Error"[[Prototype]]: Objectstatus: 500stack: "AxiosError: Request failed with status code 500\n    at settle (http://localhost:5173/node_modules/.vite/deps/axios.js?v=a2a699cc:1232:12)\n    at XMLHttpRequest.onloadend (http://localhost:5173/node_modules/.vite/deps/axios.js?v=a2a699cc:1564:7)\n    at Axios.request (http://localhost:5173/node_modules/.vite/deps/axios.js?v=a2a699cc:2122:41)\n    at async saveResult (http://localhost:5173/src/components/TextDisplay/TextDisplay.jsx?t=1752995754694:70:19)"[[Prototype]]: Error























now this is updated files now check it
yh lijiye dono file isko update kr k same files bhej dijiye taay mn copy paste kr sku 
Login.jsx


import React from "react";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./Login.css";
import axios from "axios";

const Login = () => {
  const [loginForm, setloginForm] = useState({
    email: "",
    password: "",
  });
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(
        "http://localhost:4000/api/login",
        loginForm
      );
      // const { user } = response.data;
      console.log("Saved userId to localStorage:", response.data.user.id); // ✅ Add this debug line
      localStorage.setItem("userId", response.data.user.id);
      navigate("/dashboard");
    } catch (error) {
      console.error("Login failed:", error);
    }
  };
  const handleChange = (e) => {
    const { name, value } = e.target;
    setloginForm((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  return (
    <div className="login-container">
      <div className="signup-login">
        <img src="/images/icons8-login-48.png" alt="" />
        <h2>Login</h2>
        <form onSubmit={handleSubmit}>
          <div>
            <input
              type="email"
              id="email"
              name="email"
              placeholder="email"
              value={loginForm.email}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <input
              type="password"
              id="password"
              name="password"
              placeholder="Enter your password"
              value={loginForm.password}
              onChange={handleChange}
              required
            />
          </div>
          <div></div>
          <button type="submit">Login</button>
        </form>
      </div>
    </div>
  );
};

export default Login;




TextDisplay.jsx


import React, { useState, useEffect, useRef } from "react";
import "./TextDisplay.css";
import axios from "axios";

const TextDisplay = ({
  retryPara,
  para,
  slectedTimmer,
  resultToggle,
  resultset
}) => {
  const [timeLeft, setTimeLeft] = useState(slectedTimmer);
  const [userTypedInput, setUserTypedInput] = useState(""); // total keys typed (correct + wrong)
  const [visibleInput, setVisibleInput] = useState("");      // only correct keys
  const [isTypingStart, setIsTypingStart] = useState(false);
  const [saveMessage, setSaveMessage] = useState("");
  const inputRef = useRef(null);

  // Reset all state when para or timer changes
  useEffect(() => {
    setUserTypedInput("");
    setVisibleInput("");
    setTimeLeft(slectedTimmer);
    setIsTypingStart(false);
    setSaveMessage("");
  }, [para, slectedTimmer]);

  // Countdown timer
  useEffect(() => {
    if (!isTypingStart || timeLeft <= 0) return;

    const timer = setTimeout(() => {
      setTimeLeft((prev) => {
        const updated = prev - 1;
        if (updated === 0) {
          calculateResult();
        }
        return updated;
      });
    }, 1000);

    return () => clearTimeout(timer);
  }, [timeLeft, isTypingStart]);

  const calculateResult = () => {
    const correctChars = visibleInput
      .split("")
      .filter((char, i) => char === para[i]).length;

    const totalTyped = userTypedInput.length;
    const accuracy = Math.round((correctChars / (totalTyped || 1)) * 100);
    const wpm = Math.round((correctChars / 5) / (slectedTimmer / 60));
    const wrongTyped = totalTyped - correctChars;

    const resultData = { wpm, accuracy, totalTyped, wrongTyped, timer: slectedTimmer };

    resultset(resultData);        // send to parent
    resultToggle(true);           // show result screen
    saveResult(resultData);       // send to backend
  };

  const saveResult = async (data) => {
  const userId = localStorage.getItem("userId"); // ✅ fix: get from localStorage directly
  console.log("User ID before saving:", userId);

  try {
    const res = await axios.post("http://localhost:4000/api/save-result", {
      userId,
      ...data, // spread the rest of result fields directly
    });
    console.log("Result saved:", res.data);
    setSaveMessage("Result saved successfully.");
  } catch (error) {
    console.error("Error saving result:", error);
    setSaveMessage("Failed to save result.");
  }
};

  const handleKeyDown = (e) => {
    const key = e.key;

    if (!isTypingStart) setIsTypingStart(true);

    if (key === "Backspace") {
      setUserTypedInput((prev) => prev.slice(0, -1));
      setVisibleInput((prev) => prev.slice(0, -1));
      return;
    }

    if (key.length !== 1) return;

    const currentIndex = visibleInput.length;
    if (currentIndex >= para.length) return;

    const currentChar = para[currentIndex];

    setUserTypedInput((prev) => prev + key); // always record typed key

    if (key === currentChar) {
      const newVisible = visibleInput + key;
      setVisibleInput(newVisible);

      if (newVisible.length === para.length) {
        calculateResult(); // completed early
      }
    }
  };

  // Keydown listener
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [visibleInput, isTypingStart]);

  // Highlight paragraph characters
  const renderParagraph = () => {
    return para.split("").map((char, index) => {
      let className = "default";

      if (index < visibleInput.length) {
        className = visibleInput[index] === char ? "correct" : "incorrect";
      } else if (index === visibleInput.length) {
        className = "cursor";
      }

      return (
        <span key={index} className={className}>
          {char}
        </span>
      );
    });
  };

  return (
    <div className="display-main">
      <div className="text-timer">
        <p>{timeLeft}</p>
      </div>

      <div className="text-area" onClick={() => inputRef.current?.focus()}>
        <p className="paragraph">{renderParagraph()}</p>
        <input
          ref={inputRef}
          className="hidden-input"
          onPaste={(e) => e.preventDefault()}
          onCopy={(e) => e.preventDefault()}
          onCut={(e) => e.preventDefault()}
          onContextMenu={(e) => e.preventDefault()}
        />
      </div>

      <div className="text-repeat">
        <img
          src="/images/icons8-repeat-50.png"
          alt="refresh"
          onClick={retryPara}
        />
      </div>

      {/* ✅ Show save message */}
      {saveMessage && <p className="save-message">{saveMessage}</p>}
    </div>
  );
};

export default TextDisplay;




yh meri App.jsx file hay esko sai kr k exact updatd file bhejein takay mn direct copy paste kr sku

import React, { useState } from "react";
import Header from "./components/header/Header";
import "./App.css";
import ControlBar from "./components/ControlBar/ControlBar";
import TextDisplay from "./components/TextDisplay/TextDisplay";
// import TypingControls from "./components/TypingControls/TypingControls";
import Footer from "./components/Footer/Footer";
import { useTyping } from "./hooks/useTyping";
import Result from "./components/Result/Result";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import Signup from "./components/Signup/Signup";
import Login from "./components/Login/Login";
import ProtectedRoute from "./components/ProtectedRoute/ProtectedRoute";
import Dashboard from "./components/Dashboard/Dashboard";

const App = () => {
  const {
    paragraph,
    handleChange,
    handleChangeCapital,
    handleChangePunc,
    handleChangeNumber,
  } = useTyping();

  const [timeSlect, settimeSlect] = useState(60);
  // const [userId, setuserId] = useState(null);
  const [result, setResult] = useState({
    wpm: 0,
    accuracy: 0,
    totalTyped: 0,
    wrongTyped: 0,
  });
  const [showResult, setShowResult] = useState(false);

  return (
    <BrowserRouter>
    <Header refreshPara={handleChange} />
      <Routes>
        <Route
          path="/"
          element={
            <div className="app-main">
              <div className="app-container">

                {!showResult && (
                  <>
                    <ControlBar
                      normalRefresh={handleChange}
                      refreshPunc={handleChangePunc}
                      refreshNum={handleChangeNumber}
                      refreshCap={handleChangeCapital}
                      slectTimer={settimeSlect}
                    />
                    <TextDisplay
                      retryPara={handleChange}
                      para={paragraph}
                      slectedTimmer={timeSlect}
                      resultToggle={setShowResult}
                      resultset={setResult}
                      resultActualData={result}
                    />
                  </>
                )}

                {showResult && <Result {...result} />}

              </div>
            </div>
          }
        />

        <Route path="/signup" element={<Signup />} />
        <Route path="/login" element={<Login />} />
        <Route path="/dashboard" element={
          <ProtectedRoute>
            <Dashboard />
          </ProtectedRoute>
        } />
      </Routes>
          {/* <TypingControls /> */}
          <Footer />
    </BrowserRouter>
  );
};

export default App;


✅ ResultController.js


const User = require("../models/User");
 const Result = require("../models/Results");


const saveResult = async (req, res) => {
  try {
    const { wpm, accuracy, totalTyped, wrongTyped, timer, userId } = req.body;

    const result = await Result({
      userId,
      wpm,
      accuracy,
      totalTyped,
      wrongTyped,
      timer
    }).save();

    res.status(201).json({
      success: true,
      message: "Result saved successfully",
      data: result
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Failed to save result",
      error: error.message
    });
  }
}

module.exports = {
  saveResult
};





✅ User.js


const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
    index: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  isVerified: {
    type: Boolean,
    default: false,
  },
});

module.exports = mongoose.model("User", userSchema);


Results.jsx


const express = require("express");
const mongoose = require("mongoose");

const resultsSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  wpm: { type: Number, required: true },
  accuracy: { type: Number, required: true },
  totalTyped: { type: Number, required: true },
  wrongTyped: { type: Number, required: true },
  timestamp: { type: Date, default: Date.now },
});

const Results = mongoose.model("Results", resultsSchema);

module.exports = Results;
